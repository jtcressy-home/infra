#cloud-config

# This is the user-data configuration file for cloud-init. By default this sets
# up an initial user called "ubuntu" with password "ubuntu", which must be
# changed at first login. However, many additional actions can be initiated on
# first boot from this file. The cloud-init documentation has more details:
#
# https://cloudinit.readthedocs.io/
#
# Some additional examples are provided in comments below the default
# configuration.


ntp:
  enabled: true
  pools: [0.int.pool.ntp.org, 1.int.pool.ntp.org, ntp.myorg.org]
  servers:
    - ntp.ubuntu.com

ssh_pwauth: false

users:
  - name: ubuntu
    groups: [sudo]
    shell: /usr/bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    lock_passwd: true

## Update apt database and upgrade packages on first boot
package_update: true
package_upgrade: true
apt:
  sources:
    tailscale.list:
      source: deb https://pkgs.tailscale.com/stable/ubuntu jammy main
      keyid: 2596A99EAAB33821893C0A79458CA832957F5868

packages:
- tailscale
- jq
- qrencode
- dmidecode

write_files:
- path: /usr/bin/set-hostname.py
  permissions: 0644
  owner: root
  content: |
    import os, re, subprocess
    def slugify(s):
      s = s.lower().strip()
      s = re.sub(r'[^\w\s-]', '', s)
      s = re.sub(r'[\s_-]+', '-', s)
      s = re.sub(r'^-+|-+$', '', s)
      return s
    
    def rpiserial():
      try:
        f = open('/proc/cpuinfo', 'r')
        for line in f:
          if line[0:6]=='Serial':
            cpuserial = line.split(':')[-1].strip()[-8:-1]
            break
        f.close()
      except:
        cpuserial = "ERROR000000000"
      return cpuserial

    def rpimfg():
      return "raspberrypi"

    def dmiserial():
      serial = subprocess.check_output("dmidecode -s system-serial-number", shell=True)
      return slugify(serial)

    def dmimfg():
      mfg = subprocess.check_output("dmidecode -s system-manufacturer", shell=True)
      return slugify(mfg)
    
    if os.path.exists(/sys/firmware/dmi):
      mfg = dmimfg()
      serial = dmiserial()
      os.system(f"hostnamectl set-hostname {mfg}-{serial}")
    elif os.path.exists(/sys/firmware/fdt):
      mfg = rpimfg()
      serial = rpiserial()
      os.system(f"hostnamectl set-hostname {mfg}-{serial}")
    else:
      mfg = "unknown"
      serial = "0"
      os.system(f"hostnamectl set-hostname {mfg}-{serial}")
    exit(0)
- path: /etc/systemd/system/set-hostname.service
  permissions: 0644
  owner: root
  content: |
    [Unit]
    Description=Set hostname to {mfg}-{serial}
    After=systemd-hostnamed.service

    [Service]
    Type=oneshot
    ExecStart=/usr/bin/python3 /usr/bin/set-hostname.py

    [Install]
    WantedBy=multi-user.target
- path: /etc/tailscale/up-args.sh
  permissions: 0755
  owner: root
  content: |
    #!/bin/sh
    echo "--reset"
    echo "--ssh"
    echo "--accept-dns"
    echo "--accept-routes"
    if [ -d /sys/devices/virtual/net/cni0 ];
    then
      echo "--advertise-routes $(ip route | grep src | grep cni0 | awk '{print $1}')"
    fi
    if [ -f /boot/firmware/tailscale-authkey ];
    then
      echo "--auth-key file:/boot/firmware/tailscale-authkey"
    else
      echo "--qr"
    fi
- path: /etc/systemd/system/tailscale-up.service
  permissions: 0644
  owner: root
  content: |
    [Unit]
    Description=Keeps tailscale alive, logged in and configured
    After=tailscaled.service
    Requires=tailscaled.service

    [Service]
    ExecStart=/bin/bash -c "while true; do tailscale up `/etc/tailscale/up-args.sh`; sleep 5; done"
    Restart=always
    RestartSec=15s
    User=root
    KillMode=process
    IgnoreSIGPIPE=no
    SendSIGHUP=yes

    [Install]
    WantedBy=multi-user.target
- path: /etc/systemd/system/getty@tty1.service.d/override.conf
  permissions: 0644
  owner: root
  content: |
    [Service]
    ExecStart=
    ExecStart=-/bin/bash -c "while true; do clear; tailscale status; (tailscale status --json | jq -r '.AuthURL' | qrencode -t ANSI); sleep 5; done;"
    StandardInput=tty
    StandardOutput=tty
- path: /etc/systemd/system/tailscale-cni0-route.path
  permissions: 0644
  owner: root
  content: |
    [Unit]
    Description="Re-run tailscale up when cni0 appears/disappears"

    [Path]
    PathModified=/sys/devices/virtual/net/cni0
    Unit=tailscale-up.service

    [Install]
    WantedBy=multi-user.target
    

runcmd:
- 'systemctl daemon-reload'
- 'systemctl enable --now set-hostname.service'
- 'systemctl enable --now tailscale-up.service'
- 'systemctl enable --now tailscale-cni0-route.path'
- 'systemctl restart getty@tty1.service'
- 'sudo ufw default deny incoming'
- 'sudo ufw default allow outgoing'
- 'sudo ufw allow in on tailscale0'
- 'sudo ufw enable'

output: { all: "| tee -a /boot/firmware/cloud-init-output.log" }
