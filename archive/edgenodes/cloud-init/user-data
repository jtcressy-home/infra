#cloud-config

# This is the user-data configuration file for cloud-init. By default this sets
# up an initial user called "ubuntu" with password "ubuntu", which must be
# changed at first login. However, many additional actions can be initiated on
# first boot from this file. The cloud-init documentation has more details:
#
# https://cloudinit.readthedocs.io/
#
# Some additional examples are provided in comments below the default
# configuration.


ntp:
  enabled: true
  pools: [0.int.pool.ntp.org, 1.int.pool.ntp.org, ntp.myorg.org]
  servers:
    - ntp.ubuntu.com

ssh_pwauth: false

users:
  - name: ubuntu
    groups: [sudo]
    shell: /usr/bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    lock_passwd: true

## Update apt database and upgrade packages on first boot
package_update: true
package_upgrade: true
apt:
  sources:
    tailscale.list:
      source: deb https://pkgs.tailscale.com/stable/ubuntu jammy main
      keyid: 2596A99EAAB33821893C0A79458CA832957F5868

packages:
- tailscale
- jq
- qrencode
- dmidecode
- linux-modules-extra-raspi
- iptables-persistent

bootcmd:
- 'echo "LANG=POSIX" > /etc/default/locale'
locale: POSIX

write_files:
- path: /usr/bin/set-hostname.py
  permissions: "0644"
  owner: root
  content: |
    #!/usr/bin/env python3
    import os
    import re
    import subprocess


    def slugify(s):
        s = s.lower().strip()
        s = re.sub(r'[^\w\s-]', '', s)
        s = re.sub(r'[\s_-]+', '-', s)
        s = re.sub(r'^-+|-+$', '', s)
        return s

    def rpiserial():
        try:
            with open('/proc/cpuinfo', 'r') as f:
                for line in f:
                    if line[0:6]=='Serial':
                        return line.split(':')[-1].strip()[-8:-1]
        except:
            return "ERROR000000000"

    def rpimfg():
        return "raspberrypi"

    def dmiserial():
        return slugify(subprocess.check_output("dmidecode -s system-serial-number", shell=True).decode("utf-8"))

    def dmimfg():
        return slugify(subprocess.check_output("dmidecode -s system-manufacturer", shell=True).decode("utf-8"))

    if os.path.exists("/sys/firmware/dmi"):
        mfg = dmimfg()
        serial = dmiserial()
    elif os.path.exists("/sys/firmware/fdt"):
        mfg = rpimfg()
        serial = rpiserial()
    else:
        mfg = "unknown"
        serial = "0"

    print(f"setting hostname to {mfg}-{serial}")
    os.system(f"hostnamectl set-hostname {mfg}-{serial}")
    exit(0)
- path: /etc/systemd/system/set-hostname.service
  permissions: "0644"
  owner: root
  content: |
    [Unit]
    Description=Set hostname to {mfg}-{serial}
    After=systemd-hostnamed.service

    [Service]
    Type=oneshot
    ExecStart=/usr/bin/python3 /usr/bin/set-hostname.py

    [Install]
    WantedBy=multi-user.target
- path: /usr/bin/tailscale-login.sh
  permissions: "0755"
  owner: root
  content: |
    #!/bin/bash

    while true
    do
      tailscale_state=$(tailscale status --json | jq -r '.BackendState')
      if [ "$tailscale_state" == "NeedsLogin" ]; then
        if [ -f /boot/firmware/tailscale-authkey ]; then
          tailscale login --timeout=1s --auth-key=file:/boot/firmware/tailscale-authkey
        else
          echo "starting tailscale login with 60s timeout"
          tailscale login --timeout=60s
        fi
      fi
      sleep 5;
    done
- path: /etc/systemd/system/tailscale-up.service
  permissions: "0644"
  owner: root
  content: |
    [Unit]
    Description=Keeps tailscale alive, logged in and configured
    After=tailscaled.service
    Requires=tailscaled.service

    [Service]
    ExecStart=-/usr/bin/tailscale-login.sh
    Restart=always
    RestartSec=15s
    User=root
    KillMode=process
    IgnoreSIGPIPE=no
    SendSIGHUP=yes

    [Install]
    WantedBy=multi-user.target
- path: /usr/bin/edgenode-dashboard
  permissions: "0755"
  owner: root
  content: |
    #!/bin/bash

    export TEMPFILE=$(mktemp)

    while true
    do
      echo "" > $TEMPFILE;
      cat /etc/issue | sed 's@\\r@'"$(uname -r)"'@g' | sed 's@\\m@'"$(uname -m)"'@g' | sed 's@\\l@'"$(tty)"'@g' | sed 's@\\n@'"$(hostname)"'@g' >> $TEMPFILE;
      
      
      authurl=$(tailscale status --json | jq -r '.AuthURL');
      if [ "$authurl" != "" ]; then
        echo $authurl | qrencode -t ANSIUTF8i >> $TEMPFILE;
      fi
      run-parts /etc/update-motd.d >> $TEMPFILE;
      tailscale status >> $TEMPFILE;
      
      tailscale set --ssh
      tailscale set --accept-dns
      tailscale set --accept-routes

      clear;
      cat $TEMPFILE;
      sleep 5;
    done
- path: /etc/systemd/system/getty@tty1.service.d/override.conf
  permissions: "0644"
  owner: root
  content: |
    [Service]
    ExecStart=
    ExecStart=-/usr/bin/edgenode-dashboard
    StandardInput=tty
    StandardOutput=tty
- path: /etc/systemd/resolved.conf
  append: true
  content: |
    Domains=

runcmd:
- 'sudo iptables -P FORWARD ACCEPT'
- 'sudo snap install microk8s --classic --channel=1.25'
- 'systemctl daemon-reload'
- 'systemctl enable --now set-hostname.service'
- 'systemctl enable --now tailscale-up.service'
- 'systemctl restart getty@tty1.service'
- 'sudo ufw default deny incoming'
- 'sudo ufw default allow outgoing'
- 'sudo ufw allow in on tailscale0'
- 'sudo ufw enable'

output: { all: "| tee -a /boot/firmware/cloud-init-output.log" }
