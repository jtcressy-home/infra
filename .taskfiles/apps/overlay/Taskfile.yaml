---
version: "3"

tasks:
  corevars:
    internal: true
    vars: &corevars
      project: &projectvar
        sh: |
          {{- if eq (index . "project") nil -}}
          ls {{.PROJECT_DIR}}/kubernetes/argocd/projects | sed 's/.yaml//g' | fzf --height=~10 --prompt="Select or enter ArgoCD App Project: " --print-query | tail -1
          {{- else -}}
          echo {{index . "project"}}
          {{- end -}}
      namespace: &namespacevar
        sh: |
          {{- if eq (index . "namespace") nil -}}
          ls {{.PROJECT_DIR}}/kubernetes/deploy/{{.project}}/ | fzf --height=~10 --prompt="Select or enter Namespace: " --print-query | tail -1
          {{- else -}}
          echo {{index . "namespace"}}
          {{- end -}}
      app: &appvar
        sh: |
          {{- if eq (index . "app") nil -}}
          ls {{.PROJECT_DIR}}/kubernetes/deploy/{{.project}}/{{.namespace}}/ | fzf --height=~10 --prompt="Select or enter App: " --print-query | tail -1
          {{- else -}}
          echo {{index . "app"}}
          {{- end -}}
      cluster: &clustervar
        sh: |
          {{- if eq (index . "cluster") nil -}}
          ls {{.PROJECT_DIR}}/kubernetes/clusters | fzf -1 --height=~5 --prompt="Choose a cluster: " | tr -d '\n\r'
          {{- else -}}
          echo {{index . "cluster"}}
          {{- end -}}
  helpervars:
    internal: true
    vars: &helpervars
      projectPath: &projectPath "{{.PROJECT_DIR}}/kubernetes/argocd/projects/{{.project}}.yaml"
      enabledPath: &enabledPath "{{.PROJECT_DIR}}/kubernetes/deploy/{{.project}}/{{.namespace}}/{{.app}}/clusters"
      disabledPath: &disabledPath "{{.PROJECT_DIR}}/kubernetes/deploy/{{.project}}/{{.namespace}}/{{.app}}/disabled"
      isDisabled: &isDisabled
        sh: "test -f {{.disabledPath}}/{{.cluster}}/kustomization.yaml && echo true || echo false"
      overlayPath: &overlayPath "{{.PROJECT_DIR}}/kubernetes/deploy/{{.project}}/{{.namespace}}/{{.app}}/{{if eq .isDisabled \"true\"}}disabled{{else}}clusters{{end}}/{{.cluster}}"
  allvars:
    internal: true
    vars: &allvars
      project: *projectvar
      namespace: *namespacevar
      app: *appvar
      cluster: *clustervar
      projectPath: *projectPath
      enabledPath: *enabledPath
      disabledPath: *disabledPath
      overlayPath: *overlayPath
      isDisabled: *isDisabled

  create:
    desc: "Create a new app overlay"
    summary: |
      This task will create a new kustomize overlay targeting a specific cluster.
      Common arguments (project, namespace, app, cluster) can be explicitly provided or interactively selected.
      Note: if the project, namespace or app name doesn't exist, it will not be selectable as an option and should be explicitly provided.

      Example: create a new overlay for the 'multus' app in the 'kube-system' namespace targeting the 'cluster1' cluster.
        task apps:overlay:create project=system namespace=kube-system app=multus cluster=cluster1

      Example: create a new overlay for a cluster addon that should target all clusters.
        task apps:overlay:create project=system namespace=kube-system app=volsync cluster=_all
    interactive: true
    silent: false
    vars: *allvars
    generates:
      - "{{.overlayPath}}/kustomization.yaml"
    cmds:
      - mkdir -p "{{.overlayPath}}"
      - cd "{{.overlayPath}}" && kustomize create
      - echo "Created overlay at {{.overlayPath}}"
    preconditions:
      - sh: test ! -f "{{.overlayPath}}/kustomization.yaml"
        msg: "App overlay already exists at {{.overlayPath}}."
      - sh: test -f "{{.projectPath}}"
        msg: "ArgoCD App Project '{{.project}}' does not exist."

  enable:
    desc: "Enable an app overlay"
    summary: |
      This task will enable an existing, disabled kustomize overlay targeting a specific cluster.

      Common arguments (project, namespace, app, cluster) can be explicitly provided or interactively selected.

      Example: enable the 'multus' app overlay in the 'kube-system' namespace targeting the 'cluster1' cluster.
        task apps:overlay:enable project=system namespace=kube-system app=multus cluster=cluster1

      Example: enable a cluster addon that targets all clusters.
        task apps:overlay:enable project=system namespace=kube-system app=volsync cluster=_all
    interactive: true
    silent: true
    vars: *allvars
    cmds:
      - mkdir -p "{{.enabledPath}}"
      - mv "{{.disabledPath}}/{{.cluster}}" "{{.enabledPath}}/"
      - echo "Enabled overlay at {{.enabledPath}}/{{.cluster}}"
    preconditions:
      - sh: test -f "{{.disabledPath}}/{{.cluster}}/kustomization.yaml"
        msg: "App overlay doesn't exist or isn't disabled."
  disable:
    desc: "Disable an app overlay"
    summary: |
      This task will disable an existing, enabled kustomize overlay targeting a specific cluster.

      Common arguments (project, namespace, app, cluster) can be explicitly provided or interactively selected.

      Example: disable the 'multus' app overlay in the 'kube-system' namespace targeting the 'cluster1' cluster.
        task apps:overlay:disable project=system namespace=kube-system app=multus cluster=cluster1

      Example: disable a cluster addon that targets all clusters.
        task apps:overlay:disable project=system namespace=kube-system app=volsync cluster=_all
    interactive: true
    silent: true
    vars: *allvars
    cmds:
      - mkdir -p "{{.disabledPath}}"
      - mv "{{.enabledPath}}/{{.cluster}}" "{{.disabledPath}}/"
      - echo "Disabled overlay at {{.disabledPath}}/{{.cluster}}"
    preconditions:
      - sh: test -f "{{.enabledPath}}/{{.cluster}}/kustomization.yaml"
        msg: "App overlay doesn't exist or isn't enabled."
  render:
    desc: "Render the kustomization.yaml for an app overlay"
    summary: |
      This task will render the kustomization.yaml for an existing app overlay targeting a specific cluster.

      Common arguments (project, namespace, app, cluster) can be explicitly provided or interactively selected.

      Example: render the 'multus' app overlay in the 'kube-system' namespace targeting the 'cluster1' cluster.
        task apps:overlay:render project=system namespace=kube-system app=multus cluster=cluster1

      Example: render a cluster addon that targets all clusters.
        task apps:overlay:render project=system namespace=kube-system app=volsync cluster=_all
    silent: true
    interactive: true
    vars: *allvars
    sources:
      - "{{.overlayPath}}/*.yaml"
      - "{{.overlayPath}}/**/*.yaml"
    cmds:
      - kustomize build --enable-helm "{{.overlayPath}}"
    preconditions:
      - sh: test -f "{{.overlayPath}}/kustomization.yaml"
        msg: "App overlay doesn't exist."
  edit:
    desc: "Opens the kustomization.yaml for an app overlay in your default editor"
    silent: true
    interactive: true
    vars: *allvars
    cmds:
      - $EDITOR "{{.overlayPath}}/kustomization.yaml"
    preconditions:
      - sh: test -f "{{.overlayPath}}/kustomization.yaml"
        msg: "App overlay doesn't exist."