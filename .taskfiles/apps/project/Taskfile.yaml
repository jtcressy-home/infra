---
version: "3"

tasks:
  helpervars:
    internal: true
    vars: &helpervars
      projectPath: &projectPath "{{.PROJECT_DIR}}/kubernetes/argocd/projects/{{.project}}.yaml"
  corevars:
    internal: true
    vars: &corevars
      project: &projectvar
        sh: |
          {{- if eq (index . "project") nil -}}
          ls {{.PROJECT_DIR}}/kubernetes/argocd/projects | sed 's/.yaml//g' | fzf --height=~10 --prompt="Select or enter ArgoCD App Project: " --print-query | tail -1
          {{- else -}}
          echo {{index . "project"}}
          {{- end -}}
      namespace: &namespacevar
        sh: |
          {{- if eq (index . "namespace") nil -}}
          ls {{.PROJECT_DIR}}/kubernetes/deploy/{{.project}}/ | fzf --height=~10 --prompt="Select or enter Namespace: " --print-query | tail -1
          {{- else -}}
          echo {{index . "namespace"}}
          {{- end -}}

  create:
    desc: "Create a new ArgoCD App Project"
    silent: true
    vars:
      project: *projectvar
      projectPath: *projectPath
      description: &description >
        {{.description | default (list .project "project" | join " ")}}
      createProjectTemplate: &createProjectTemplate |
        apiVersion: argoproj.io/v1alpha1
        kind: AppProject
        metadata:
          name: {{.project}}
          namespace: argocd
        spec:
          clusterResourceWhitelist:
            - group: "*"
              kind: "*"
          namespaceResourceWhitelist:
            - group: "*"
              kind: "*"
          sourceRepos:
            - 'https://github.com/jtcressy-home/infra'
          description: {{.description}}
    generates:
      - "{{.PROJECT_DIR}}/kubernetes/argocd/projects/{{.project}}.yaml"
    cmds:
      - |
        cat <<EOF > "{{.projectPath}}"
        {{.createProjectTemplate}}
        EOF
    preconditions:
      - sh: test ! -f "{{.projectPath}}"
        msg: "Project already exists"
      - sh: test -n "{{.project}}"
        msg: "Project name is required"

  show:
    desc: "Show an ArgoCD App Project"
    aliases:
      - view
    summary: |
      This task will display the contents of an ArgoCD App Project. 
      <project> can be explicitly provided or interactively selected.

      Example: Show the 'system' project.
        task apps:project:show project=system
    silent: true
    vars:
      project: *projectvar
      projectPath: *projectPath
    sources:
      - "{{.projectPath}}"
    cmds:
      - cat "{{.projectPath}}"
    preconditions:
      - sh: test -f "{{.projectPath}}"
        msg: "Project does not exist"

  dest:
    desc: "List destinations for an ArgoCD App Project"
    summary: |
      This task will list all allowed destinations for an ArgoCD App Project
      <project> (required) can be explicitly provided or interactively selected.
      
      Example: List destinations for the 'system' project.
        task apps:project:dest:list project=system
    silent: true
    aliases:
      - dest:list
    vars:
      project: *projectvar
      projectPath: *projectPath
    cmds: # print results as a table, with headers "Namespace", "Server Name", "Server Address"
      - >
        echo "Project: {{.project}}"
      - yq eval '.spec.destinations' "{{.projectPath}}" -o=json | jq -r '["NAMESPACE", "SERVER\u00A0NAME", "SERVER\u00A0ADDRESS"], (.[] | [.namespace, .name, .server]) | @tsv' | column -t
    preconditions:
      - sh: test -f "{{.projectPath}}"
        msg: "Project does not exist"

  dest:add:
    desc: "Add a new destination to an ArgoCD App Project"
    summary: |
      This task will add a new destination to an ArgoCD App Project. 
      <project> can be explicitly provided or interactively selected.
      <namespace> is required.
      <server> and <name> are optional, default to '*'.

      Example: Add a new destination to the 'system' project targeting the 'kube-system' namespace in the 'in-cluster' cluster.
        task apps:project:dest:add project=system namespace=kube-system server=https://kubernetes.default.svc name=in-cluster

      Example: Add a new destination to the 'system' project targeting the 'kube-system' namespace in all clusters.
        task apps:project:dest:add project=system namespace=kube-system
    silent: true
    vars:
      project: *projectvar
      namespace: *namespacevar
      projectPath: *projectPath
    cmds:
      - |
        yq eval '.spec.destinations += [{ {{if eq .name ""}}{{else}}"name": "{{.name}}", {{end}}"namespace": "{{.namespace}}"{{if eq .server ""}}{{else}}, "server": "{{.server}}"{{end}} }]' -i "{{.projectPath}}"
    preconditions:
      - sh: test -f "{{.projectPath}}"
        msg: "Project does not exist"
      - sh: test -n "{{.namespace}}"
        msg: "Namespace is required"
      - sh: test ! -n "$(yq -r '.spec.destinations[] | select(.namespace == "{{.namespace}}") {{if eq .name ""}}{{else}}| select(.name == "{{.name}}"){{end}} {{if eq .server ""}}{{else}}| select(.server == "{{.server}}"){{end}}' < "{{.projectPath}}")"
        msg: "Destination already exists in project"

  dest:remove:
    desc: "Remove a destination from an ArgoCD App Project"
    summary: |
      This task will remove a destination from an ArgoCD App Project. 
      <project> can be explicitly provided or interactively selected.
      <namespace> is required.
      <server> and <name> are optional.

      Example: Remove a destination from the 'system' project targeting the 'kube-system' namespace in the 'in-cluster' cluster.
        task apps:project:dest:remove project=system namespace=kube-system server=https://kubernetes.default.svc name=in-cluster

      Example: Remove a destination from the 'system' project targeting the 'kube-system' namespace in all clusters.
        task apps:project:dest:remove project=system namespace=kube-system
    aliases:
      - dest:rm
    silent: true
    vars:
      project: *projectvar
      namespace: *namespacevar
      projectPath: *projectPath
    cmds:
      - |
        yq eval 'del(.spec.destinations[] | select(.namespace == "{{.namespace}}") {{if eq .name ""}}{{else}}| select(.name == "{{.name}}"){{end}} {{if eq .server ""}}{{else}}| select(.server == "{{.server}}"){{end}})' -i "{{.projectPath}}"
    preconditions:
      - sh: test -f "{{.projectPath}}"
        msg: "Project does not exist"
      - sh: test -n "{{.namespace}}"
        msg: "Namespace is required"
      - sh: test -n "$(yq -r '.spec.destinations[] | select(.namespace == "{{.namespace}}") {{if eq .name ""}}{{else}}| select(.name == "{{.name}}"){{end}} {{if eq .server ""}}{{else}}| select(.server == "{{.server}}"){{end}}' < "{{.projectPath}}")"
        msg: "Destination does not exist in project"